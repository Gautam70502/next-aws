  name : Deploy to ECS
  on : 
    push :
      branches : main
  jobs :
    build : 
      name: CI
      runs-on: ubuntu-latest
      steps:
      - name: Check out latest code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-north-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: next-image
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:latest

    deploy:
      name: CD
      runs-on: ubuntu-latest
      needs: build
      steps:
      - env:
          ecrImage: ${{ needs.build.outputs.ecrImage }}
        run: echo "$ecrImage"
      - name: Check out latest code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-north-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }} \
          --query taskDefinition > task-definition.json
      
      - name: updating task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: next-container
          environment-variables: "LOG_LEVEL=info"
          image: ${{ secrets.ECR_IMAGE_URL }}
        
      - name: Deploy Amazon ECS task definition
        env: 
          ECS_SERVICE: next-service
          ECS_CLUSTER: next-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false

    cleanup:
      name: Cleanup Old Docker Images
      runs-on: ubuntu-latest
      needs: deploy
      steps:
        - name: Check out latest code
          uses: actions/checkout@v3
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: eu-north-1

        - name: Delete old images from ECR
          env: 
            REPOSITORY_NAME: next-image
          run: |
            IMAGE_DIGESTS=$(aws ecr list-images --repository-name $REPOSITORY_NAME --filter tagStatus=UNTAGGED --query 'imageIds[*].imageDigest' --output text)
          
            if [ -z "$IMAGE_DIGESTS" ]; then
              echo "No untagged images found."
            else
              for DIGEST in $IMAGE_DIGESTS; do
                 aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids imageDigest=$DIGEST
                echo "Deleted untagged image: $DIGEST"
              done
            fi